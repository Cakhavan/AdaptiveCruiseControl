%% initialize breach. Every breach driver script will typically start with
%  this command.
InitBreach;
clc;
clear S;
close all;

%% Initialize the values of various parameters appearing in this model.
% feel free to change the values of these parameters and experiment with
% them.

% Initial position of the host car 
x0_host = 0; % (m)

% Initial velocity of the host car
v0_host = 10; % (m/s)

% Initial position of the lead car. Take care to initialize the lead car
% at least dSafe distance away from the host car!
x0_lead = 50; % (m)
 
% Initial velocity of the lead car.
v0_lead = 20; % (m/s)

% Cruising speed reference set by the host-car driver
vref_host = 20; % (m/s)

% sample time for this model. Using smaller sample times will lead to
% slower simulations. 
Ts = 0.5; % (seconds)

% the simulation time horizon, we will run each simulation for endTime secs
endTime = 50; % (seconds)

% Minimum safe distance that ACC is required to maintain between the host
% car and the lead car
dSafe = 5; % (m)

% maximum acceleration possible for the lead car
leadAccMax = 2; % (m/s^2)

% minimum acceleration possible for the lead car
leadAccMin = -1; % (m/s^2)


%%

% Create an interface to the ACC_HW simulink model from Breach
S = BreachSimulinkSystem('ACC_MP1_a');

% The times at which we wish to observe system behavior 
tspan = 0:Ts:endTime;

% Through this command, Breach tells Simulink to provide trajectories at 
% each point in the tspan vector
S.SetTime(tspan);

% the following commands create a parameterized input signal. The 
% parameterization of the input is done such that the resulting signal
% has numCP equally spaced control points, i.e., the signal is assumed 
% to change only at the times specified by the control points 
% and remains constant between control points. 
numCP = 20;
inputGen.type = 'UniStep';
inputGen.cp = numCP;
S.SetInputGen(inputGen);

% the above commands created numCP parameters for each input signal in the 
% simulink model. Below we create a cell array containing a list of these
% parameters. We hard-code the string 'LeadAcc' here as that is the name of
% the only input signal in this model
params = cell(1,numCP);
for jj=1:20
   params{1,jj} = sprintf('LeadAcc_u%d',jj-1);
end
%%

% specify that at each control point, the input signal can be some value
% between [leadAccMin, leadAccMax]
S.SetParamRanges(params,repmat([leadAccMin leadAccMax],20,1));

% inspect all the parameters that breach allows us to manipulate
S.PrintParams;

%% Sample numSimulations different random vectors of values for the 
% control points. Note that this is equivalent to creating numSimulations
% different input signal patterns for the model
numSimulations = 20;
S.QuasiRandomSample(numSimulations);

% simulate for each of the input signals generated by random sampling
S.Sim;

%% Pretty-printing plots by getting signal values and grouping them 
% together. DO NOT USE this if numSimulations is a large number, because
% Matlab will open 'numSimulations' figure windows, and it could slow down
% your Matlab or even cause it to crash!
signalValues = S.GetSignalValues({'HostPosition','LeadPosition',...
                               'HostVelocity','LeadAcc',...
                               'HostAcceleration','LeadVelocity'});
close all;

% as a safeguard, you could use min(numSimulations,20) instead of
% numSimulations as the loop termination condition below:
for jj=1:numSimulations
    figure;
    trace = signalValues{jj};
    subplot(3,1,1);
    plot(tspan,trace(1,:),'-r.', tspan, trace(2,:), '-bx');
    % title, legend code courtesy Ryan Blackwell
    title('Position');
    legend('Host','Lead');
    
    subplot(3,1,2);    
    plot(tspan,trace(3,:),'-r.', ...
         tspan, vref_host*ones(1,length(tspan)),'-ko', ... 
         tspan,trace(6,:),'-bx');   
    title('Velocity');
    legend('Host','Desired Host','Lead');
    
    subplot(3,1,3);
    plot(tspan,trace(5,:),'-r.',tspan,trace(4,:),'-bx');
    title('Acceleration');
    legend('Host','Lead');
end


STL_ReadFile('ACC_Requirements.stl');
disp('Checking safe following');
S.CheckSpec(safeFollowing)

disp('Checking cruising speed when not impeded');
S.CheckSpec(cruiseWhenNotImpeded)

disp('Checking forward progress');
S.CheckSpec(forwardProgress)

disp('Checking if cruising works');
S.CheckSpec(cruiseWhenNotImpeded)

disp('Checking that the host stops only if required');
S.CheckSpec(dontStopUnlessLeadStops)

